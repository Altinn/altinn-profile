// <auto-generated> This file was originally auto generated by EF Core Power Tools. </auto-generated>
#nullable disable

using Altinn.Profile.Integrations.Entities;

using Microsoft.EntityFrameworkCore;

namespace Altinn.Profile.Integrations.Persistence;

/// <summary>
/// Represents the database context for the profile database.
/// </summary>
public partial class ProfileDbContext : DbContext
{
    /// <summary>
    /// Initializes a new instance of the <see cref="ProfileDbContext"/> class.
    /// </summary>
    /// <param name="options">The options to be used by a <see cref="DbContext"/>.</param>
    public ProfileDbContext(DbContextOptions<ProfileDbContext> options)
        : base(options)
    {
    }

    /// <summary>
    /// Gets or sets the <see cref="DbSet{MailboxSupplier}"/> representing the mailbox suppliers.
    /// </summary>
    public virtual DbSet<MailboxSupplier> MailboxSuppliers { get; set; }

    /// <summary>
    /// Gets or sets the <see cref="DbSet{Metadata}"/> representing the metadata.
    /// </summary>
    public virtual DbSet<Metadata> Metadata { get; set; }

    /// <summary>
    /// Gets or sets the <see cref="DbSet{Person}"/> representing the people.
    /// </summary>
    public virtual DbSet<Person> People { get; set; }

    /// <summary>
    /// Gets or sets the <see cref="DbSet{OfficialContactPoint}"/> for organizations.
    /// </summary>
    public virtual DbSet<OfficialContactPoint> OfficialContactPoints { get; set; }

    /// <summary>
    /// Gets or sets the <see cref="DbSet{OfficialAddressSyncMetadata}"/> timestamp for last brreg-sync.
    /// </summary>
    public virtual DbSet<OfficialInfoSyncMetadata> OfficialAddressSyncMetadata { get; set; }

    /// <summary>
    /// Configures the schema needed for the context.
    /// </summary>
    /// <param name="modelBuilder">The builder being used to construct the model for this context.</param>
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<MailboxSupplier>(entity =>
        {
            entity.HasKey(e => e.MailboxSupplierId).HasName("mailbox_supplier_pkey");

            entity.Property(e => e.MailboxSupplierId).UseIdentityAlwaysColumn();
            entity.Property(e => e.OrgNumberAk).IsFixedLength();
        });

        modelBuilder.Entity<Metadata>(entity =>
        {
            entity.HasKey(e => e.LatestChangeNumber).HasName("metadata_pkey");

            entity.Property(e => e.LatestChangeNumber).ValueGeneratedNever();
        });

        modelBuilder.Entity<Person>(entity =>
        {
            entity.HasKey(e => e.ContactAndReservationUserId).HasName("person_pkey");

            entity.Property(e => e.ContactAndReservationUserId).UseIdentityAlwaysColumn();
            entity.Property(e => e.FnumberAk).IsFixedLength();
            entity.Property(e => e.LanguageCode).IsFixedLength();

            entity.HasOne(d => d.MailboxSupplierIdFkNavigation)
                  .WithMany(p => p.People)
                  .HasConstraintName("fk_mailbox_supplier");
        });

        modelBuilder.Entity<OfficialContactPoint>(entity =>
        {
            entity.HasKey(e => e.NotificationEndpointID).HasName("official_contact_pkey"); ;
            entity.Property(e => e.KoFuViOrganizationNumber);
            entity.Property(e => e.CreatedDateTime).HasComputedColumnSql("CURRENT_TIMESTAMP");
        });

        modelBuilder.Entity<OfficialInfoSyncMetadata>(entity =>
        {
            entity.HasKey(e => e.LastChangedId).HasName("official_address_metadata_pkey");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    /// <summary>
    /// A partial method that can be used to configure the model further.
    /// </summary>
    /// <param name="modelBuilder">The builder being used to construct the model for this context.</param>
    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
