// <auto-generated> This file was originally auto generated by EF Core Power Tools. </auto-generated>
#nullable disable

using Altinn.Profile.Core.PartyGroups;
using Altinn.Profile.Core.ProfessionalNotificationAddresses;
using Altinn.Profile.Core.User.PortalSettings;
using Altinn.Profile.Integrations.Entities;
using Altinn.Profile.Integrations.Leases;

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Altinn.Profile.Integrations.Persistence;

/// <summary>
/// Represents the database context for the profile database.
/// </summary>
public partial class ProfileDbContext : DbContext
{
    /// <summary>
    /// Initializes a new instance of the <see cref="ProfileDbContext"/> class.
    /// </summary>
    /// <param name="options">The options to be used by a <see cref="DbContext"/>.</param>
    public ProfileDbContext(DbContextOptions<ProfileDbContext> options)
        : base(options)
    {
    }

    /// <summary>
    /// Gets or sets the <see cref="DbSet{MailboxSupplier}"/> representing the mailbox suppliers.
    /// </summary>
    public virtual DbSet<MailboxSupplier> MailboxSuppliers { get; set; }

    /// <summary>
    /// Gets or sets the <see cref="DbSet{Metadata}"/> representing the metadata.
    /// </summary>
    public virtual DbSet<Metadata> Metadata { get; set; }

    /// <summary>
    /// Gets or sets the <see cref="DbSet{Person}"/> representing the people.
    /// </summary>
    public virtual DbSet<Person> People { get; set; }

    /// <summary>
    /// The <see cref="DbSet{OrganizationDE}"/> representing orgnumber and id.
    /// </summary>
    public virtual DbSet<OrganizationDE> Organizations { get; set; }

    /// <summary>
    /// The <see cref="DbSet{NotificationAddressesDE}"/> representing notification addresses for organizations.
    /// </summary>
    public virtual DbSet<NotificationAddressDE> NotificationAddresses { get; set; }

    /// <summary>
    /// The <see cref="DbSet{RegistrySyncMetadata}"/> timestamp for last brreg-sync.
    /// </summary>
    public virtual DbSet<RegistrySyncMetadata> RegistrySyncMetadata { get; set; }

    /// <summary>
    /// The <see cref="DbSet{Group}"/> representing a users organization of parties in a named group.
    /// </summary>
    public virtual DbSet<Group> Groups { get; set; }

    /// <summary>
    /// The <see cref="DbSet{PartyGroupAssociation}"/> representing the association of parties in groups.
    /// </summary>
    public virtual DbSet<PartyGroupAssociation> PartyGroupAssociations { get; set; }

    /// <summary>
    /// The <see cref="DbSet{UserPartyContactInfo}"/> representing a users personal contact info for a party.
    /// </summary>
    public virtual DbSet<UserPartyContactInfo> UserPartyContactInfo { get; set; }

    /// <summary>
    /// The <see cref="DbSet{UserPartyContactInfoResource}"/> representing the association of a resource to a personal contact info for an organization.
    /// </summary>
    public virtual DbSet<UserPartyContactInfoResource> UserPartyContactInfoResources { get; set; }

    /// <summary>
    /// The <see cref="DbSet{Lease}"/> representing a users organization of parties in a named group.
    /// </summary>
    public virtual DbSet<Lease> Lease { get; set; }

    /// <summary>
    /// The <see cref="DbSet{ChangelogSyncMetadata}"/> timestamp for last changelog sync from date for a data-type.
    /// </summary>
    public virtual DbSet<ChangelogSyncMetadata> ChangelogSyncMetadata { get; set; }

    /// <summary>
    /// The <see cref="DbSet{PortalSettings}"/> representing the portal settings for users.
    /// </summary>
    public virtual DbSet<PortalSettings> PortalSettings { get; set; }

    /// <summary>
    /// Configures the schema needed for the context.
    /// </summary>
    /// <param name="modelBuilder">The builder being used to construct the model for this context.</param>
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<MailboxSupplier>(entity =>
        {
            entity.HasKey(e => e.MailboxSupplierId).HasName("mailbox_supplier_pkey");

            entity.Property(e => e.MailboxSupplierId).UseIdentityAlwaysColumn();
            entity.Property(e => e.OrgNumberAk).IsFixedLength();
        });

        modelBuilder.Entity<Metadata>(entity =>
        {
            entity.HasKey(e => e.LatestChangeNumber).HasName("metadata_pkey");

            entity.Property(e => e.LatestChangeNumber).ValueGeneratedNever();
        });

        modelBuilder.Entity<Person>(entity =>
        {
            entity.HasKey(e => e.ContactAndReservationUserId).HasName("person_pkey");

            entity.Property(e => e.ContactAndReservationUserId).UseIdentityAlwaysColumn();
            entity.Property(e => e.FnumberAk).IsFixedLength();
            entity.Property(e => e.LanguageCode).IsFixedLength();

            entity.HasOne(d => d.MailboxSupplierIdFkNavigation)
                  .WithMany(p => p.People)
                  .HasConstraintName("fk_mailbox_supplier");
        });

        modelBuilder.Entity<NotificationAddressDE>(entity =>
        {
            entity.HasKey(e => e.NotificationAddressID).HasName("contact_info_pkey");
            entity.Property(e => e.CreatedDateTime).HasDefaultValueSql("now()").ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<OrganizationDE>(entity =>
        {
            entity.HasKey(e => e.RegistryOrganizationId).HasName("organization_id_pkey");
            entity.HasMany(e => e.NotificationAddresses)
                    .WithOne(n => n.Organization)
                    .HasForeignKey(e => e.RegistryOrganizationId)
                    .HasConstraintName("fk_organization_id");
        });

        modelBuilder.Entity<RegistrySyncMetadata>(entity =>
        {
            entity.HasKey(e => e.LastChangedId).HasName("registry_sync_metadata_pkey");
        });

        modelBuilder.Entity<PartyGroupAssociation>(entity =>
        {
            entity.ToTable("party_group_association", "user_preferences");

            entity.HasKey(e => e.AssociationId).HasName("association_id_pkey");
            entity.Property(e => e.AssociationId).IsRequired();
            entity.Property(e => e.GroupId).IsRequired();
            entity.Property(e => e.PartyUuid).IsRequired();
            entity.Property(e => e.Created).HasDefaultValueSql("now()").ValueGeneratedOnAdd();

            entity.HasOne(d => d.Group)
                  .WithMany(p => p.Parties)
                  .HasForeignKey(d => d.GroupId)
                  .OnDelete(DeleteBehavior.Cascade)
                  .HasConstraintName("fk_group_id");
        });

        modelBuilder.Entity<Group>(entity =>
        {
            entity.ToTable("groups", "user_preferences");

            entity.HasKey(e => e.GroupId).HasName("group_id_pkey");
            entity.Property(e => e.GroupId).IsRequired();
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.UserId).IsRequired();

            entity.HasIndex(e => e.UserId, "ix_user_id");
            entity.HasIndex(e => new { e.UserId, e.IsFavorite }, "ix_user_favorite").IsUnique().HasFilter("is_favorite = true");

            entity.HasMany(e => e.Parties)
                    .WithOne(n => n.Group)
                    .HasForeignKey(e => e.GroupId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_group_id");
        });

        modelBuilder.Entity<UserPartyContactInfo>(entity =>
        {
            entity.ToTable("user_party_contact_info", "professional_notification_settings");

            entity.HasKey(e => e.UserPartyContactInfoId).HasName("user_party_contact_info_pkey");
            entity.Property(e => e.UserPartyContactInfoId).UseIdentityAlwaysColumn();
            entity.Property(e => e.PartyUuid).IsRequired();
            entity.Property(e => e.UserId).IsRequired();
            entity.Property(e => e.EmailAddress).HasMaxLength(400);
            entity.Property(e => e.PhoneNumber).HasMaxLength(26);
            entity.Property(e => e.LastChanged).IsConcurrencyToken();

            entity.HasIndex(e => new { e.PartyUuid, e.UserId }, "ix_user_party_contact_info_party_uuid_user_id");
            entity.HasIndex(e => e.UserId, "ix_user_party_contact_info_user_id");

            entity.HasMany(e => e.UserPartyContactInfoResources)
                    .WithOne(n => n.UserPartyContactInfo)
                    .HasForeignKey(e => e.UserPartyContactInfoId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_user_party_contact_info_id");
        });

        modelBuilder.Entity<UserPartyContactInfoResource>(entity =>
        {
            entity.ToTable("user_party_contact_info_resources", "professional_notification_settings");

            entity.HasKey(e => e.UserPartyContactInfoResourceId).HasName("user_party_contact_info_resource_pkey");
            entity.Property(e => e.UserPartyContactInfoResourceId).UseIdentityAlwaysColumn();
        });

        modelBuilder.Entity<Lease>(entity =>
        {
            entity.ToTable("lease", "lease");
            entity.HasKey(e => e.Id).HasName("lease_id_pkey");
            entity.Property(e => e.Id).IsRequired();
            entity.Property(e => e.Token).IsRequired();
            entity.Property(e => e.Expires).IsRequired();
            entity.Property(e => e.Acquired).IsRequired(false);
            entity.Property(e => e.Released).IsRequired(false);
            entity.HasIndex(e => e.Id, "ix_lease_id").IsUnique();
        });

        modelBuilder.Entity<ChangelogSyncMetadata>(entity =>
        {
            entity.HasKey(e => e.LastChangedId).HasName("changelog_sync_metadata_pkey");
        });

        modelBuilder.Entity<Altinn.Profile.Core.User.PortalSettings.PortalSettings>(entity =>
        {
            entity.ToTable("portal_settings", "user_preferences");

            entity.HasKey(e => e.UserId).HasName("user_id_pkey");
            entity.Property(e => e.UserId).IsRequired();
            entity.Property<int>(e => e.LanguageType).IsRequired();
            entity.Property<bool>(e => e.DoNotPromptForParty).IsRequired();
            entity.Property<Guid>(e => e.PreselectedPartyUuid).IsRequired();
            entity.Property<bool>(e => e.ShowClientUnits).IsRequired();
            entity.Property<bool>(e => e.ShouldShowSubEntities).IsRequired();
            entity.Property<bool>(e => e.ShouldShowDeletedEntities).IsRequired();

            entity.HasIndex(e => e.UserId, "ix_portal_settings_user_id").IsUnique();
        });

        OnModelCreatingPartial(modelBuilder);
    }

    /// <summary>
    /// A partial method that can be used to configure the model further.
    /// </summary>
    /// <param name="modelBuilder">The builder being used to construct the model for this context.</param>
    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
